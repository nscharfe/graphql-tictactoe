// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Player string

const (
	PlayerX Player = "X"
	PlayerO Player = "O"
)

var AllPlayer = []Player{
	PlayerX,
	PlayerO,
}

func (e Player) IsValid() bool {
	switch e {
	case PlayerX, PlayerO:
		return true
	}
	return false
}

func (e Player) String() string {
	return string(e)
}

func (e *Player) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Player(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Player", str)
	}
	return nil
}

func (e Player) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusActive Status = "ACTIVE"
	StatusDraw   Status = "DRAW"
	StatusWinner Status = "WINNER"
)

var AllStatus = []Status{
	StatusActive,
	StatusDraw,
	StatusWinner,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusDraw, StatusWinner:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
